@model TourGuide.Models.Hotel
<script src="~/Scripts/bootstrap-rating-input.min.js" type="text/javascript"></script>
@{
    ViewBag.Title = "Edit";
}

<script type="text/javascript">
    function validate() {
        var error = false;
        var errorList = "";
        var name = document.getElementById("Name").value;
        var address = document.getElementById("Address").value;
        var zipcode = document.getElementById("ZipCode").value;
        var phone = document.getElementById("Phone").value;
        var url = document.getElementById("URL").value;
        var rating = document.getElementById("Rating").value;

        var regExPhone = /^\D?(\d{3})\D?\D?(\d{3})\D?(\d{4})$/;
        var phoneIsValid = regExPhone.test(phone);

        var regZipCode = /^[0-9]{5}$/;
        var zipIsValid = regZipCode.test(zipcode);

        var regAddress = /^[a-z-A-Z0-9\s]{1,50}$/;
        var addIsValid = regAddress.test(address);

        var regName = /^[a-zA-Z0-9\s]{1,50}$/;
        var nameIsValid = regName.test(name);

        var regExURL = /^\s*www\.[a-z\d\-]{1,255}\.com\s*$/;
        var urlIsValid = regExURL.test(url);

        //var regExRating = /^[1-5]{1}$/;
        //var ratingIsValid = regExRating.test(rating);



        if (name === "") {
            error = true;
            errorList += "<li> The name of the Hotel is required. </li>";
        }
        else if (nameIsValid === false) {
            error = true;
            errorList += "<li> The name is too long.  Must be 50 characters or less.</li>";
        }

        if (address === "") {
            error = true;
            errorList += "<li> The address of the Hotel is required. </li>";
        }
        else if (addIsValid === false) {
            error = true;
            errorList += "<li> The address is too long.  Must be 50 characters or less.</li>";
        }

        if (isNaN(zipcode)) {
            error = true;
            errorList += "<li> The zip code of the Hotel must be numeric. </li>";
        }
        else if (zipIsValid === false) {
            error = true;
            errorList += "<li> The zip code is not entered correctly.  Must be five numeric digits. </li>";
        }

        if (phone === "") {
            error = true;
            errorList += "<li> The phone number of the Hotel is required. </li>";
        }
        else if (phoneIsValid === false) {
            error = true;
            errorList += "<li> The phone number is not entered correctly </li>";
        }

        if (urlIsValid === false) {
            error = true;
            errorList += "<li> The url is not entered correctly.  Format example: www.something.com</li>";
        }

        //if (ratingIsValid === false) {
        //    error = true;
        //    errorList += "<li> The rating is not entered correctly.  Must be one numeric digit between 1 to 5. </li>";
        //}

        if (error === true) {
            var errorListElement = document.getElementById("errorList");
            errorListElement.innerHTML = errorList;
        }
        else {
            var form = document.getElementById("editForm");
            form.submit();
        }
    }
</script>

<h2>Edit</h2>


@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "editForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Hotel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.CityID, "City", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CityID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CityID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.URL, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.URL, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.URL, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.Rating, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Rating, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Lat, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Lat, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Lat, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Long, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Long, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Long, "", new { @class = "text-danger" })
            </div>
        </div>
        <ul id="errorList"></ul>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Save" class="btn btn-default" onclick="validate();" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
